apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-app-code
  namespace: mcp-server
data:
  requirements.txt: |
    fastmcp
    httpx # Mantido caso _handle_ollama_request seja adicionado depois
    pydantic # Mantido caso schemas sejam adicionados depois

  main.py: |
    import os
    from fastmcp import FastMCP
    import sys
    # Removido httpx, typing, pydantic por enquanto para simplificar

    print("--- Script main.py Iniciado ---")

    # Cria a instância principal do FastMCP
    try:
        app = FastMCP(name="Teste Simples MCP")
        print("Instância FastMCP criada.")
    except Exception as e:
        print(f"ERRO ao criar FastMCP: {e}")
        sys.exit(f"Falha ao criar FastMCP: {e}")

    # --- Tool de Teste Mínima ---
    print("-> Registrando tool: process_data")
    @app.tool()
    def process_data(input: str) -> str:
        """Process data on the server"""
        print(f"Executando tool: process_data com input='{input}'")
        return f"Processed: {input}"
    print("-> Registro da tool process_data concluído.")


    # --- Bloco para iniciar o servidor ---
    if __name__ == "__main__":
        try:
            print("-> Iniciando servidor FastMCP HTTP via app.run() na porta 8000 (com path='/mcp')...")
            # Vamos manter o path="/mcp" explícito por enquanto
            app.run(transport="http", host="0.0.0.0", port=8000, path="/mcp")
        except Exception as e:
            print(f"ERRO FATAL ao iniciar servidor app.run(): {e}")
            sys.exit(f"Falha ao iniciar app.run(): {e}")
    else:
         print("Script importado, não iniciando o servidor automaticamente.")